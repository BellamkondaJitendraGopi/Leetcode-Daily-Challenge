/*

Author : B.Jitendra Gopi
Date : 28/01/2024
Problem : 1074. Number of Submatrices That Sum to Target
Difficulty : Hard
Problem Link :https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/description/


*/
import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int count = 0;

        for (int startCol = 0; startCol < n; startCol++) {
            int[] prefixSum = new int[m];
            for (int endCol = startCol; endCol < n; endCol++) {
                Map<Integer, Integer> map = new HashMap<>();
                int runningSum = 0;
                map.put(0, 1); 
                for (int row = 0; row < m; row++) {
                    prefixSum[row] += matrix[row][endCol];
                    runningSum += prefixSum[row];
                    int complement = runningSum - target;
                    if (map.containsKey(complement)) {
                        count += map.get(complement);
                    }
                    map.put(runningSum, map.getOrDefault(runningSum, 0) + 1);
                }
            }
        }
        return count;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] matrix1 = {{0,1,0},{1,1,1},{0,1,0}};
        int target1 = 0;
        System.out.println(solution.numSubmatrixSumTarget(matrix1, target1)); 

        int[][] matrix2 = {{1,-1},{-1,1}};
        int target2 = 0;
        System.out.println(solution.numSubmatrixSumTarget(matrix2, target2)); 

        int[][] matrix3 = {{904}};
        int target3 = 0;
        System.out.println(solution.numSubmatrixSumTarget(matrix3, target3));
    }
}
