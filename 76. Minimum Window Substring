/*

Author : B.Jitendra Gopi
Date : 04/02/2024
Problem : 76. Minimum Window Substring
Difficulty : Hard
Problem Link : https://leetcode.com/problems/minimum-window-substring/description/

*/

import java.util.*;

class Solution {
    public String minWindow(String s, String t) {
        if (s.length() < t.length()) return "";
        
        Map<Character, Integer> tFreq = new HashMap<>();
        Map<Character, Integer> windowFreq = new HashMap<>();
        
        
        for (char c : t.toCharArray()) {
            tFreq.put(c, tFreq.getOrDefault(c, 0) + 1);
        }
        
        int left = 0, right = 0;
        int minLen = Integer.MAX_VALUE;
        int minStart = 0;
        int requiredChars = tFreq.size();
        int formedChars = 0;
        
        while (right < s.length()) {
            char currentChar = s.charAt(right);
            windowFreq.put(currentChar, windowFreq.getOrDefault(currentChar, 0) + 1);
            
            if (tFreq.containsKey(currentChar) && windowFreq.get(currentChar).equals(tFreq.get(currentChar))) {
                formedChars++;
            }
            
            while (left <= right && formedChars == requiredChars) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minStart = left;
                }
                
                char leftChar = s.charAt(left);
                windowFreq.put(leftChar, windowFreq.get(leftChar) - 1);
                
                if (tFreq.containsKey(leftChar) && windowFreq.get(leftChar) < tFreq.get(leftChar)) {
                    formedChars--;
                }
                
                left++;
            }
            
            right++;
        }
        
        return minLen == Integer.MAX_VALUE ? "" : s.substring(minStart, minStart + minLen);
    }
}
